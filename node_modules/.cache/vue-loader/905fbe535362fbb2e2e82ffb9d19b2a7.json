{"remainingRequest":"C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\src\\components\\cardProjeto.vue?vue&type=template&id=026e2c93&scoped=true&","dependencies":[{"path":"C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\src\\components\\cardProjeto.vue","mtime":1623072622530},{"path":"C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623013249770},{"path":"C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1623013274046},{"path":"C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623013249770},{"path":"C:\\Users\\Alexandre\\Desktop\\WebpII_2semestre\\Tsiw_App\\ProjetoInterdisciplinar2-1\\node_modules\\vue-loader\\lib\\index.js","mtime":1623013274042}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}